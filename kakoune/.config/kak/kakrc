# Bootstrap `bundle`.
evaluate-commands %sh{
    plugins="$kak_config/bundle"
    mkdir -p "$plugins"
    [ ! -e "$plugins/kak-bundle" ] && \
        git clone -q https://github.com/jdugan6240/kak-bundle "$plugins/kak-bundle"
    echo "source '$plugins/kak-bundle/rc/kak-bundle.kak'"
}

bundle-noload kak-bundle https://github.com/jdugan6240/kak-bundle

bundle kak-lsp https://github.com/kak-lsp/kak-lsp %{
    hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp|csharp) %{
        lsp-enable-window
        hook window BufWritePre .* lsp-formatting-sync
    }

    hook global KakEnd .* lsp-exit

    map global user l ":enter-user-mode lsp<ret>" -docstring "LSP mode"
    map global insert <tab> '<a-semicolon>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring "Select next snippet placeholder"
    map global object a "<a-semicolon>lsp-object<ret>" -docstring "LSP any symbol"
    map global object <a-a> "<a-semicolon>lsp-object<ret>" -docstring "LSP any symbol"
    map global object e "<a-semicolon>lsp-object Function Method<ret>" -docstring "LSP function or method"
    map global object k "<a-semicolon>lsp-object Class Interface Struct<ret>" -docstring "LSP class interface or struct"
    map global object d "<a-semicolon>lsp-diagnostic-object --include-warnings<ret>" -docstring "LSP errors and warnings"
    map global object D "<a-semicolon>lsp-diagnostic-object<ret>" -docstring "LSP errors"
}

bundle-install-hook kak-lsp %{
    cargo install --locked --force --path .
}

bundle-cleaner kak-lsp %{
    rm ~/.cargo/bin/kak-lsp
}

# Borked:
#bundle kakoune-wakatime https://github.com/WhatNodyn/kakoune-wakatime.git

hook global WinCreate .* %{ editorconfig-load }

set-option global scrolloff 1,3

add-highlighter global/ regex \h+$ 0:Error

map global user y "<a-|>wl-copy<ret>" -docstring "Yank selection into system clipboard"
map global user p "<a-!>wl-paste<ret>" -docstring "Paste from system clipboard"

map global user a ":alt<ret>" -docstring "Switch between related buffers (.c vs .h, etc.)"
map global user b ":b " -docstring "A shortcut for easier buffer selection"
map global user q ":db<ret>" -docstring "Kill current buffer"
map global user k ":e ~/.config/kak/kakrc<ret>" -docstring "Edit the kakrc file"

map global prompt <c-n> <tab> -docstring "Select next candidate like in Emacs"
map global prompt <c-p> <s-tab> -docstring "Select previous candidate like in Emacs"

define-command git-edit -params 1 %{ edit %arg{1} }

complete-command git-edit shell-script-candidates %{
    repo_root=$(git rev-parse --show-toplevel)
    git ls-files -co -X "$repo_root/.gitignore"
}

map global user f ":git-edit " -docstring "Edit a file from the current git repository"
