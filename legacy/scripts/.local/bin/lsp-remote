#!/usr/bin/env bash

# A utility for running language servers on a remote machine.

# $@ - language server command.

# Most of the script's functionality works over SSH.
SSH_USER=lsp
SSH_HOST=185.222.117.73

SSH_ADDR=$SSH_USER@$SSH_HOST

# Current project's root directory.
LOCAL_PROJECT_ROOT=$PWD

# The project's path on the remote machine.
REMOTE_PROJECT_ROOT=/tmp/${LOCAL_PROJECT_ROOT##*/}

# FIFO used for communication between `inotifywait` and `mainloop`.
MAINLOOP_FIFO=$(mktemp -u /tmp/lsp-remote-XXXXX)

# Connect to the remote machine over SSH.
function ssh() {
    env ssh -T $SSH_ADDR "$@"
}

# Run a helper script on the remote machine.
function run-helper() {
    local helper_basename=$1.sh
    local destination=/tmp/

    shift

    # Copy the script over, and start it with supplied arguments.
    scp ~/.local/bin/helpers/$helper_basename $SSH_ADDR:$destination
    ssh $destination/$helper_basename "$@"
}

# List all files in the local project.
function project-tree() {
    local flag

    # -c outputs the tracked files, and -o, the untracked.
    for flag in -c -o; do
        git -C "$LOCAL_PROJECT_ROOT" ls-files $flag --exclude-standard
    done
}

# File-sync mainloop.
function start-mainloop() {
    mkfifo "$MAINLOOP_FIFO"

    # Listen for file-events in the background, sending them to the FIFO.
    # This ensures that `inotifywait` _will_ be killed upon exit: Bash functions
    # don't have a PID and cannot be stopped with `kill`.
    inotifywait -rm --format $'%w%f\t%e' "$LOCAL_PROJECT_ROOT" \
                -e modify,move,create > "$MAINLOOP_FIFO" &

    sleep 2

    local line

    # This will run until the mainloop FIFO is exhausted.
    while read line; do
        local local_file=$(echo "$line" | cut -f1)

        # Prevent spamming `lsp-copy`.
        [[ "$local_file" = "$prev_file" ]] && continue

        local_file=$(realpath --relative-to "$LOCAL_PROJECT_ROOT" "$local_file")

        local remote_file=$REMOTE_PROJECT_ROOT/${local_file#$LOCAL_PROJECT_ROOT}

        # Re-upload the file unless it's completely ignored by Git.
        if project-tree | grep -qFx "$local_file"; then
            run-helper lsp-copy "$remote_file" < "$local_file"
        fi

        local prev_file=$local_file
    done < "$MAINLOOP_FIFO" &
}

# Kill children in the background on exit.
trap 'kill $(jobs -p)' SIGINT SIGTERM SIGKILL EXIT

# Upload the project in its current state to the remote machine.
tar -czT <(project-tree) | run-helper lsp-untar "$REMOTE_PROJECT_ROOT"

start-mainloop

# Finally, run the language server on the remote machine.
run-helper lsp-run "$REMOTE_PROJECT_ROOT" "$@"
